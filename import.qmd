---
title: "Import practical"
author: Your name here
date: today
format: html
---

> In this practical, you'll learn how to
exercise to setup your project again and 
import flat files using the `readr` package

# Before you start


To perform reproducible research it is a good practice to store the files in a standardized location. 
We will take advantage of the RStudio projects and store data files in a sub-folder called `data`. 

## Prepare your project folder

1. Check that the project is active; its name should appear on the top-right corner. You can specify the name when cloning the repository.

2. Create a folder named `data` within your project's folder. Use the `Files` pane in the lower right Rstudio panel, the terminal or your favorite file browser.

3. Download the file [`blood_fat.csv`](https://biostat2.uni.lu/practicals/data/blood_fat.csv) and place it in the `data` sub-folder you just created.

4. Run `renv::restore()` to install the packages packaged. `renv` should already be activated if installed in the systems library.

5. Add a code chunk to load the libraries. You only need `readr`.

```{r}
install.packages("readr")
library("readr")

```


6. Don't forget to run the chunk's code to load the library during your interactive session


### Warning
If you load the library only in the console and forget to place a chunk to load it, the knitting process will fail. Indeed, when you click on the _Render_ button, the chunks are evaluated in a new and fresh environment.



## Use `readr` to load your first file


### Load the `blood_fat` file


### Tip
The relative path can be safely built using `"data/blood_fat.csv"` 
if you followed the preliminary steps above, download the csv in a sub-folder `data` of a RStudio project

For example, you folder structure could be (depending on the picked names) as here:

- RStudio project is `mads4-import-practical`
- Rmarkdown document is `import.qmd`
The relative path can be safely built using `"data/blood_fat.csv"` 
if you followed the preliminary steps above, download the csv in a sub-folder `data` of a RStudio project

For example, you folder structure could be (depending on the picked names) as here:

- RStudio project is `mads4-import-practical`
- Rmarkdown document is `import.qmd`

```
.
├── data
│   └── blood_fat.csv
├── import.qmd
├── renv/
├── renv.lock
└── mads4-import-practical.Rproj


```


```{r}
download.file("https://biostat2.uni.lu/practicals/data/blood_fat.csv",
              "data/blood_fat.csv")

```




`read_delim()` execution is reporting the dimensions of the file, along with the guessed delimiter and data type of each columns.

If we are happy with the guessed delimiter and the column names / types, we could silent this reporting.

##### Load again the same file, silencing the `read_delim()` message

```{r}
readr::read_delim("data/blood_fat.csv", 
                  show_col_types = FALSE)


```



## The tibble

`read_delim()` loads the data as a tibble. The main advantage to use tibbles over a regular data frame is the printing.

- Tibbles show some useful information such as the number of rows and columns:



Rows: 25 Columns: 5── Column specification 



- The columns of a tibble report their type:



chr (1): group
dbl (4): id, weight, age, fat



Actually, both `age` and `id` are **integers**, and should be read as such.

### Read the `blood_fat.csv` specifying the data types of `age` and `id` as integers


### Tip
In the `col_types = cols(....)` you can use the columns bare names and either the long description
 to call the specific data type like `col_integer()` or the shortcut `"i"`



```{r}
readr::read_delim("data/blood_fat.csv", 
                   col_types = cols(
                                    id = col_integer(),
                                    age = col_integer()
                                   )
                 )

```


### Read the `blood_fat.csv` specifying the data types of `age` and `id` as integers, skipping `weight`.

```{r}
readr::read_delim("data/blood_fat.csv", 
                   col_types = cols(
                                    id = "i",
                                    age = "i"
                                   ),
                   col_select = c(id, group, age, fat)
                 )
```


## Render the document 

You use the command 

```
quarto render import.qmd
```

You can also click the button in the user interface of RStudio or use the <kbd>Ctrl</kbd> <kbd>Shift</kbd> <kbd>k</kbd> (Windows)  or  <kbd>Cmd</kbd> <kbd>Shift</kbd> <kbd>k</kbd> on macOS. 

## Add the data and the changed Rmarkdown file to your Github repository

You can use Git tab in RStudio or the command line as you prefer.

1. `Add` the new files. For now it is OK to also include the data file.
2. Commit the new and the changed file. Choose a commit message.
3. Pull from the repository (this is just good practice)
4. Push your changes to the repository.

```
git add data/blood_fat.csv
git commit -m "New data set"
<<edit and finalise the exercise>>
git commit -m "Solutions for import practical"
git pull
git push
```
